#import libray
import pandas as pd 

#import data

#import cpac data 
cpac = pd.read_excel("raw_data/cpac.xlsx")

#import fleetlink
fleetlink = pd.read_json("raw_data/fleetlink.json")

#import vehicledaily
vehicledaily = pd.read_excel("raw_data/vehicledaily.xlsx")

#import vehiclemaster 
vehiclemaster = pd.read_excel("raw_data/vehiclemaster.xlsx")

#import ship to data 
shipto = pd.read_excel("raw_data/shipto.xlsx")

#cpac data process
#select col 
cpac = cpac[['plantNo',
       'dpNo', 'dpDate', 'dpTime', 'carNo', 'driverName',
       'siteCode', 'siteName', 'quantity','distanceCode']]

#convert dpDate & dptime to datetime format and use bkk timezone 
if "dpDate" in cpac.columns:
    cpac["dpDate"] = pd.to_datetime(cpac["dpDate"], unit="ms", utc=True).dt.tz_convert("Asia/Bangkok")

if "dpTime" in cpac.columns:
    cpac["dpTime"] = pd.to_datetime(cpac["dpTime"], unit="ms", utc=True).dt.tz_convert("Asia/Bangkok")
cpac

cpac["‡πÅ‡∏û‡∏•‡πâ‡∏ô‡∏ó‡πå"] = cpac["dpNo"].astype(str).str[:4]
cpac["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"] = cpac["dpTime"]
cpac["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 1"] = cpac["plantNo"]
cpac["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 2"] = cpac["distanceCode"]
cpac["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 3"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 4"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] = cpac["dpTime"]
cpac["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î LDT"] = cpac["dpTime"]
cpac["‡∏ô‡∏ô ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á"] = cpac["quantity"]
cpac["LDT"] = cpac["dpNo"]
cpac["Ship To"] = cpac["dpNo"].astype(str).str[:4] + cpac["siteCode"]



#create new col and inputdata 
cpac["Type"] = "single drop"
cpac["‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå"] = "‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à"
cpac["dropoffs"] = ""
cpac["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏¥‡πà‡∏á"] = "legacy"
cpac["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö"] = ""
cpac["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á"] = "heavy"
cpac["Service Parameter A"] = ""
cpac["Service Parameter B"] = ""
cpac["‡πÅ‡∏û‡∏•‡πâ‡∏ô‡∏ó‡πå‡πÇ‡∏≠‡πÄ‡∏ô‡∏¢‡πâ‡∏≤‡∏¢"] = ""
cpac["‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡πà‡∏ß‡∏°"] = ""
cpac["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏≤‡∏á"] = ""
cpac["‡πÅ‡∏û‡∏•‡πâ‡∏ô‡∏ó‡πå‡πÇ‡∏≠‡πÄ‡∏ô‡∏¢‡πâ‡∏≤‡∏¢"] = ""
cpac["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = ""
cpac["‡∏ß‡∏¥‡πà‡∏á‡πÅ‡∏ó‡∏ô‡∏£‡∏ñ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"] = ""
cpac["‡∏™‡∏≤‡∏Ç‡∏≤"] = "LB"

#fleetlink data process

#select col
fleetlink = fleetlink[['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç DP', '‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô','‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô']]

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ pandas ‡πÄ‡∏î‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
for col in ['‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô', '‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô']:
    fleetlink[col] = pd.to_datetime(
        fleetlink[col], 
        errors='coerce',              # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaT
        infer_datetime_format=True    # ‡πÉ‡∏´‡πâ pandas ‡πÄ‡∏î‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    ).dt.tz_localize('Asia/Bangkok', ambiguous='NaT', nonexistent='NaT')

# ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô merge
cpac["dpNo"] = cpac["dpNo"].astype(str)
fleetlink["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç DP"] = fleetlink["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç DP"].astype(str)
cpac["carNo"] = cpac["carNo"].astype(str)
vehicledaily["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏ñ"] = vehicledaily["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏ñ"].astype(str)

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö inner join
merged = cpac.merge(
    fleetlink,
    how="inner",
    left_on="dpNo",
    right_on="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç DP"
)


# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cpac and vehicledaily
merged = merged.merge(
    vehicledaily,
    how="inner",
    left_on="carNo",
    right_on="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏ñ"
)


#calculate ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏° from vehicledaily
merged["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°"] = ""
# Rule 1: If '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' == 'Scco MS', set '‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á' to 1
merged.loc[merged['‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ'] == '‡∏û‡∏à‡∏™', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°'] = 'OT-MT01'
merged.loc[merged['‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ'] == '‡∏û‡∏à‡∏£', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°'] = 'OT-MT02'

merged["‡∏£‡∏´‡∏±‡∏™ ‡∏û‡∏à‡∏™ 1"] = ""
merged["‡∏£‡∏´‡∏±‡∏™ ‡∏û‡∏à‡∏™ 2"] = ""
merged["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß"] = ""

merged["‡∏£‡∏´‡∏±‡∏™ ‡∏û‡∏à‡∏™ 1"] = merged["‡∏£‡∏´‡∏±‡∏™"]
merged["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß"] = "‡∏™‡∏ö." + merged["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"]

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö cpac and vehiclemaster 
merged = merged.merge(
    vehiclemaster,
    how="inner",
    left_on="carNo",
    right_on="‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ"
)
merged

#cal new col by using data from vehiclemaster 
merged['‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á'] = merged['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞'].apply(lambda x: 'CPAC L' if x == 'Mixer 10 ‡∏•‡πâ‡∏≠' else '6 ‡∏•‡πâ‡∏≠')
merged['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] = merged['‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á'].apply(lambda x: 'M026' if x == '6 ‡∏•‡πâ‡∏≠' else 'M025 ')


#convert data type
merged["Ship To"] = merged["Ship To"].astype(str)
shipto["‡∏£‡∏´‡∏±‡∏™"] = shipto["‡∏£‡∏´‡∏±‡∏™"].astype(str)


# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cpac and shipto
merged = merged.merge(
    shipto,
    how="left",
    left_on="Ship To",
    right_on="‡∏£‡∏´‡∏±‡∏™"
)


#cal col by using data from shipto
merged['‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'] = merged['‡∏ô‡∏ô ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á']

merged['‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'] = merged.apply(
    lambda row: 3 if (
        row['‡πÇ‡∏ã‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'] == 'West' and 
        isinstance(row['‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'], (int, float)) and 
        row['‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'] <= 3
    ) else row['‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'],
    axis=1
)

#convert date format
# üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô datetime
datetime_cols = merged.select_dtypes(include=['datetime64[ns]', 'datetime64[ns, UTC]']).columns

# üïê ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'dd/mm/YYYY HH:MM'
for col in datetime_cols:
    merged[col] = merged[col].dt.strftime('%d/%m/%Y %H:%M')
    
    
# ‚úÖ select col
selected_cols = [
    '‡∏™‡∏≤‡∏Ç‡∏≤', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'LDT', 'Type', '‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå', 'Ship To', '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á', 'dropoffs',
    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏¥‡πà‡∏á', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á',
    'Service Parameter A', 'Service Parameter B', '‡πÅ‡∏û‡∏•‡πâ‡∏ô‡∏ó‡πå', '‡πÅ‡∏û‡∏•‡πâ‡∏ô‡∏ó‡πå‡πÇ‡∏≠‡πÄ‡∏ô‡∏¢‡πâ‡∏≤‡∏¢',
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 1', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 2',
    '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 3', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 4', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°',
    '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡πà‡∏ß‡∏°', '‡∏£‡∏´‡∏±‡∏™ ‡∏û‡∏à‡∏™ 1', '‡∏£‡∏´‡∏±‡∏™ ‡∏û‡∏à‡∏™ 2', '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß', '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏≤‡∏á',
    '‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', '‡∏ô‡∏ô ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á', '‡∏ô‡∏ô ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
    '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1', '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2', '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 3',
    '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 4', '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î LDT', '‡∏ß‡∏¥‡πà‡∏á‡πÅ‡∏ó‡∏ô‡∏£‡∏ñ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'
]

# ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏ä‡πà‡∏ô "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà_x")
# ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ rename ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:
merged = merged.rename(columns={
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà_x': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    "‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô":"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 3",
    "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô":"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° 4",
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°_x":"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏£‡πà‡∏ß‡∏°"
})

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
merged_selected = merged[selected_cols]


# üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime ‡∏Å‡πà‡∏≠‡∏ô (ignore error ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')

# üïê ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 19/08/2025 08:04
merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.strftime('%d/%m/%Y')

# üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime ‡∏Å‡πà‡∏≠‡∏ô (ignore error ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"] = pd.to_datetime(merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"], errors='coerce')

# üïê ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 19/08/2025 08:04
merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"] = merged_selected["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"].dt.strftime('%d/%m/%Y')

from datetime import datetime

# üïí Generate dynamic filename
today_str = datetime.now().strftime("%d-%m-%y")
filename = f"LDTCPAC_{today_str}.xlsx"

# üíæ Save file
merged_selected.to_excel(filename, index=False)

